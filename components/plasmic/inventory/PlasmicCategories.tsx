// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: s5FhyUW8T3ytXm9scvnXVz
// Component: RZAp7xuMg_sW

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: 4AVNSKas2_f2/component
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: s5FhyUW8T3ytXm9scvnXVz/projectcss
import sty from "./PlasmicCategories.module.css"; // plasmic-import: RZAp7xuMg_sW/css

createPlasmicElementProxy;

export type PlasmicCategories__VariantMembers = {};
export type PlasmicCategories__VariantsArgs = {};
type VariantPropType = keyof PlasmicCategories__VariantsArgs;
export const PlasmicCategories__VariantProps = new Array<VariantPropType>();

export type PlasmicCategories__ArgsType = {};
type ArgPropType = keyof PlasmicCategories__ArgsType;
export const PlasmicCategories__ArgProps = new Array<ArgPropType>();

export type PlasmicCategories__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  section?: Flex__<"section">;
  h1?: Flex__<"h1">;
  addCategory?: Flex__<typeof AntdModal>;
  form?: Flex__<typeof FormWrapper>;
  table?: Flex__<typeof RichTable>;
  editCategory?: Flex__<typeof AntdModal>;
  freeBox?: Flex__<"div">;
  editCategoryForm?: Flex__<typeof FormWrapper>;
};

export interface DefaultCategoriesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCategories__RenderFunc(props: {
  variants: PlasmicCategories__VariantsArgs;
  args: PlasmicCategories__ArgsType;
  overrides: PlasmicCategories__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "addCategory.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "editCategory.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectedCategory",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "editCategoryForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "editCategoryForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "editCategoryForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "editCategoryForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    getCategories: usePlasmicDataOp(() => {
      return {
        sourceId: "ii6VDSpnFMwKb2HQy54mdQ",
        opId: "62e3c1fd-a96e-44ae-bea6-0d5c414426f9",
        userArgs: {},
        cacheKey: `plasmic.$.62e3c1fd-a96e-44ae-bea6-0d5c414426f9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
          >
            <DataCtxReader__>
              {$ctx => (
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Categories"}
                  </h1>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__j0CZp)}
                    onClick={async () => {
                      const $steps = {};

                      $steps["updateAddCategoryOpen"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["addCategory", "open"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateAddCategoryOpen"] != null &&
                        typeof $steps["updateAddCategoryOpen"] === "object" &&
                        typeof $steps["updateAddCategoryOpen"].then ===
                          "function"
                      ) {
                        $steps["updateAddCategoryOpen"] = await $steps[
                          "updateAddCategoryOpen"
                        ];
                      }
                    }}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zAe9L
                      )}
                    >
                      {"Add a category"}
                    </div>
                  </AntdButton>
                  <AntdModal
                    data-plasmic-name={"addCategory"}
                    data-plasmic-override={overrides.addCategory}
                    className={classNames("__wab_instance", sty.addCategory)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6Gs0O
                        )}
                      >
                        {""}
                      </div>
                    }
                    modalScopeClassName={sty["addCategory__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "addCategory",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "addCategory",
                      "open"
                    ])}
                    title={"Add a category"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.form),
                        data: {
                          sourceId: "ii6VDSpnFMwKb2HQy54mdQ",
                          opId: "875b18c1-c3f2-41a6-8c05-2513f147f8a5",
                          userArgs: {},
                          cacheKey: `plasmic.$.${(() => {
                            try {
                              return "getSchema";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}.$.OqTdJE4Yklwd.$.875b18c1-c3f2-41a6-8c05-2513f147f8a5.$.`,
                          invalidatedKeys: null,
                          roleId: null
                        },
                        dataFormItems: (() => {
                          const __composite = [
                            {
                              key: "category_id",
                              fieldId: "category_id",
                              hidden: null
                            },
                            { key: "name", fieldId: "name" },
                            { key: "description", fieldId: "description" }
                          ];
                          __composite["0"]["hidden"] = true;
                          return __composite;
                        })(),

                        extendedOnValuesChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["form", "value"],
                            FormWrapper_Helpers
                          ),
                        formItems: [],
                        labelCol: { span: 8, horizontalOnly: true },
                        layout: "vertical",
                        mode: "simplified",
                        onFinish: async values => {
                          const $steps = {};

                          $steps["defaultSubmit"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "ii6VDSpnFMwKb2HQy54mdQ",
                                    opId: "9887676b-3795-4f56-8d94-9ddc5a22602e",
                                    userArgs: {
                                      variables: [$state.form.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  },
                                  continueOnError: false
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["defaultSubmit"] != null &&
                            typeof $steps["defaultSubmit"] === "object" &&
                            typeof $steps["defaultSubmit"].then === "function"
                          ) {
                            $steps["defaultSubmit"] = await $steps[
                              "defaultSubmit"
                            ];
                          }
                        },
                        onIsSubmittingChange:
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "isSubmitting",
                            ["form", "isSubmitting"],
                            FormWrapper_Helpers
                          ),
                        ref: ref => {
                          $refs["form"] = ref;
                        },
                        submitSlot: (
                          <AntdButton
                            className={classNames(
                              "__wab_instance",
                              sty.button__lmgBm
                            )}
                            submitsForm={true}
                            type={"primary"}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Xjuc
                              )}
                            >
                              {"Submit"}
                            </div>
                          </AntdButton>
                        ),
                        wrapperCol: { span: 16, horizontalOnly: true }
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "form.value"
                          },
                          {
                            name: "isSubmitting",
                            plasmicStateName: "form.isSubmitting"
                          }
                        ],
                        [],
                        FormWrapper_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <FormWrapper
                          data-plasmic-name={"form"}
                          data-plasmic-override={overrides.form}
                          {...child$Props}
                        />
                      );
                    })()}
                  </AntdModal>
                  {(() => {
                    const child$Props = {
                      canSelectRows: "none",
                      className: classNames("__wab_instance", sty.table),
                      data: (() => {
                        try {
                          return $queries.getCategories;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })(),
                      fields: (() => {
                        const __composite = [
                          {
                            key: "category_id",
                            fieldId: "category_id",
                            isHidden: null
                          },
                          { key: "name", fieldId: "name", title: null },
                          {
                            key: "description",
                            fieldId: "description",
                            title: null
                          },
                          {
                            key: "number_of_products",
                            fieldId: "number_of_products",
                            title: null,
                            dataType: null
                          }
                        ];
                        __composite["0"]["isHidden"] = true;
                        __composite["1"]["title"] = "Name";
                        __composite["2"]["title"] = "Description";
                        __composite["3"]["title"] = "Products";
                        __composite["3"]["dataType"] = "number";
                        return __composite;
                      })(),

                      onRowSelectionChanged: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKey",
                          ["table", "selectedRowKey"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRow",
                          ["table", "selectedRow"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRows",
                          ["table", "selectedRows"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "selectedRowKeys",
                          ["table", "selectedRowKeys"],
                          RichTable_Helpers
                        ).apply(null, eventArgs);
                      },
                      rowActions: (() => {
                        const __composite = [
                          {
                            type: null,
                            label: null,
                            children: null,
                            onClick: null
                          },
                          { type: "item", label: null, onClick: null }
                        ];
                        __composite["0"]["type"] = "item";
                        __composite["0"]["label"] = "Edit";
                        __composite["0"]["children"] = (() => {
                          const __composite = [
                            { label: null },
                            { label: null }
                          ];
                          __composite["0"]["label"] = "Edit";
                          __composite["1"]["label"] = "Delete";
                          return __composite;
                        })();
                        __composite["0"]["onClick"] = async (rowKey, row) => {
                          const $steps = {};

                          $steps["updateEditCategoryOpen"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editCategory", "open"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditCategoryOpen"] != null &&
                            typeof $steps["updateEditCategoryOpen"] ===
                              "object" &&
                            typeof $steps["updateEditCategoryOpen"].then ===
                              "function"
                          ) {
                            $steps["updateEditCategoryOpen"] = await $steps[
                              "updateEditCategoryOpen"
                            ];
                          }

                          $steps["updateSelectedCategory"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["selectedCategory"]
                                  },
                                  operation: 0,
                                  value: rowKey
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateSelectedCategory"] != null &&
                            typeof $steps["updateSelectedCategory"] ===
                              "object" &&
                            typeof $steps["updateSelectedCategory"].then ===
                              "function"
                          ) {
                            $steps["updateSelectedCategory"] = await $steps[
                              "updateSelectedCategory"
                            ];
                          }
                        };
                        __composite["1"]["label"] = "Delete";
                        __composite["1"]["onClick"] = async (rowKey, row) => {
                          const $steps = {};

                          $steps["updateTableSelectedRowKeys"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["table", "selectedRowKeys"]
                                  },
                                  operation: 0,
                                  value: rowKey
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTableSelectedRowKeys"] != null &&
                            typeof $steps["updateTableSelectedRowKeys"] ===
                              "object" &&
                            typeof $steps["updateTableSelectedRowKeys"].then ===
                              "function"
                          ) {
                            $steps["updateTableSelectedRowKeys"] = await $steps[
                              "updateTableSelectedRowKeys"
                            ];
                          }

                          $steps["postgresDeleteMany"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "ii6VDSpnFMwKb2HQy54mdQ",
                                    opId: "eb784d02-5357-49e7-bef1-30b6e3b128bd",
                                    userArgs: {
                                      conditions: [rowKey]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresDeleteMany"] != null &&
                            typeof $steps["postgresDeleteMany"] === "object" &&
                            typeof $steps["postgresDeleteMany"].then ===
                              "function"
                          ) {
                            $steps["postgresDeleteMany"] = await $steps[
                              "postgresDeleteMany"
                            ];
                          }
                        };
                        return __composite;
                      })(),

                      scopeClassName: sty["table__instance"],
                      selectedRowKey: generateStateValueProp($state, [
                        "table",
                        "selectedRowKey"
                      ]),
                      selectedRowKeys: generateStateValueProp($state, [
                        "table",
                        "selectedRowKeys"
                      ]),
                      themeResetClassName: classNames(
                        projectcss.root_reset,
                        projectcss.root_reset_tags,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "selectedRowKey",
                          plasmicStateName: "table.selectedRowKey"
                        },
                        {
                          name: "selectedRow",
                          plasmicStateName: "table.selectedRow"
                        },
                        {
                          name: "selectedRows",
                          plasmicStateName: "table.selectedRows"
                        },
                        {
                          name: "selectedRowKeys",
                          plasmicStateName: "table.selectedRowKeys"
                        }
                      ],
                      [],
                      RichTable_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <RichTable
                        data-plasmic-name={"table"}
                        data-plasmic-override={overrides.table}
                        {...child$Props}
                      />
                    );
                  })()}
                  <AntdModal
                    data-plasmic-name={"editCategory"}
                    data-plasmic-override={overrides.editCategory}
                    className={classNames("__wab_instance", sty.editCategory)}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens,
                      plasmic_plasmic_rich_components_css.plasmic_tokens
                    )}
                    footer={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qDpXl
                        )}
                      >
                        {""}
                      </div>
                    }
                    modalScopeClassName={sty["editCategory__modal"]}
                    onOpenChange={generateStateOnChangeProp($state, [
                      "editCategory",
                      "open"
                    ])}
                    open={generateStateValueProp($state, [
                      "editCategory",
                      "open"
                    ])}
                    title={"Edit a category"}
                  >
                    <div
                      data-plasmic-name={"freeBox"}
                      data-plasmic-override={overrides.freeBox}
                      className={classNames(projectcss.all, sty.freeBox)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames(
                            "__wab_instance",
                            sty.editCategoryForm
                          ),
                          data: {
                            sourceId: "ii6VDSpnFMwKb2HQy54mdQ",
                            opId: "40b3a2e4-1833-4ede-819d-ff7084a02c6d",
                            userArgs: {
                              filters: [$state.selectedCategory]
                            },
                            cacheKey: `plasmic.$.${(() => {
                              try {
                                return "getOne";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}.$.TNCN3yPkKqM9.$.40b3a2e4-1833-4ede-819d-ff7084a02c6d.$.`,
                            invalidatedKeys: null,
                            roleId: null
                          },
                          dataFormItems: (() => {
                            const __composite = [
                              {
                                key: "category_id",
                                fieldId: "category_id",
                                hidden: null
                              },
                              { key: "name", fieldId: "name" },
                              { key: "description", fieldId: "description" }
                            ];
                            __composite["0"]["hidden"] = true;
                            return __composite;
                          })(),

                          extendedOnValuesChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["editCategoryForm", "value"],
                              FormWrapper_Helpers
                            ),
                          formItems: [],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "simplified",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "ii6VDSpnFMwKb2HQy54mdQ",
                                      opId: "408e33ad-0569-41f0-8ab5-71e006001864",
                                      userArgs: {
                                        conditions: [$state.selectedCategory],
                                        variables: [
                                          $state.editCategoryForm.value
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange:
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["editCategoryForm", "isSubmitting"],
                              FormWrapper_Helpers
                            ),
                          ref: ref => {
                            $refs["editCategoryForm"] = ref;
                          },
                          submitSlot: (
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button___0YQ9D
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bXRa9
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          ),
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "editCategoryForm.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "editCategoryForm.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"editCategoryForm"}
                            data-plasmic-override={overrides.editCategoryForm}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </AntdModal>
                </section>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "pageLayout",
    "section",
    "h1",
    "addCategory",
    "form",
    "table",
    "editCategory",
    "freeBox",
    "editCategoryForm"
  ],
  pageLayout: [
    "pageLayout",
    "section",
    "h1",
    "addCategory",
    "form",
    "table",
    "editCategory",
    "freeBox",
    "editCategoryForm"
  ],
  section: [
    "section",
    "h1",
    "addCategory",
    "form",
    "table",
    "editCategory",
    "freeBox",
    "editCategoryForm"
  ],
  h1: ["h1"],
  addCategory: ["addCategory", "form"],
  form: ["form"],
  table: ["table"],
  editCategory: ["editCategory", "freeBox", "editCategoryForm"],
  freeBox: ["freeBox", "editCategoryForm"],
  editCategoryForm: ["editCategoryForm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  section: "section";
  h1: "h1";
  addCategory: typeof AntdModal;
  form: typeof FormWrapper;
  table: typeof RichTable;
  editCategory: typeof AntdModal;
  freeBox: "div";
  editCategoryForm: typeof FormWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCategories__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCategories__VariantsArgs;
    args?: PlasmicCategories__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCategories__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCategories__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCategories__ArgProps,
          internalVariantPropNames: PlasmicCategories__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCategories__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCategories";
  } else {
    func.displayName = `PlasmicCategories.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "s5FhyUW8T3ytXm9scvnXVz"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCategories = Object.assign(
  // Top-level PlasmicCategories renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    addCategory: makeNodeComponent("addCategory"),
    form: makeNodeComponent("form"),
    table: makeNodeComponent("table"),
    editCategory: makeNodeComponent("editCategory"),
    freeBox: makeNodeComponent("freeBox"),
    editCategoryForm: makeNodeComponent("editCategoryForm"),

    // Metadata about props expected for PlasmicCategories
    internalVariantProps: PlasmicCategories__VariantProps,
    internalArgProps: PlasmicCategories__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCategories;
/* prettier-ignore-end */
